<%- include('./partials/header.ejs'); %>
  <section class="home_section">
    <div class="home_content">
      <img class="toggle_button" src="./images/right-arrow-circle.svg" alt="toggle menu" />
      <span class="text">Bros Chat Application</span>
    </div>
    <!-- chat container start  -->
    <div id="chat-container">
      <div id="search-container">
        <form>
          <input 
            type="text" 
            placeholder="name" 
            name="search_field" 
            id="search_field" 
            class="text_field"
            autocomplete="off" 
          />
          <p id="conversation_search_error" class="error"></p>
          <div class="search_conversation"></div>
          <input type="submit" value="Submit" class="hide">
        </form>
      </div>
      
      <div id="conversation-list">
        <ul>
        <% data.forEach(function(conversation) { %>
          <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
          <% if(conversation.creator.id == loggedInUser.userId) { %>
            <li>
              <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>', '<%= conversation.participant.avatar %>')">
                <% if (conversation.participant.avatar) { %>
                <img src="<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>" />
                <% } else { %>
                  <img src="./images/nophoto.png" />
                <% } %>
                <div class="title-text"><%= conversation.participant.name %></div>
                <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
                <img class="conversation-dlt" src="./images/trash.svg" alt="Delete Conversation" onclick="deleteConversation('<%= conversation._id %>')" />
              </div>
            </li>
          <% } else { %>
            <li>
              <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>', '<%= conversation.creator.avatar %>')">
                <% if (conversation.creator.avatar) { %>
                <img src="<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name %>" />
                <% } else { %>
                  <img src="./images/nophoto.png" />
                <% } %>
                <div class="title-text"><%= conversation.creator.name %></div>
                <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
                <img class="conversation-dlt" src="./images/trash.svg" alt="Delete Conversation" onclick="deleteConversation('<%= conversation._id %>')" />
              </div>
            </li>
          <% } %>
        <% }); %>
        </ul>
        
        <!-- show no conversation placeholder image for 0 conversations -->
        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg"></div>
        <% } %>
      </div>

      <div class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <!-- conversation name -->
      <div id="chat-title">
        <img src="" alt="" id="conversation-partner-avatar" />
        <span id="conversation-partner"></span>
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">Select a conversation</div>
      </div>

      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment">
          <img src="./images/attachment.svg" alt="Add Attachment" />
        </label>
        <input
          type="file"
          multiple
          name="attachment"
          class="hide"
          id="attachment"
          onchange="selected_attachments()"
        />
        <input type="text" name="message" placeholder="Type a message" autocomplete="off" />
        <!-- attachment preview container -->
        <div
          class="attachments_preview_container"
          id="attachments_preview_container"
        >
          <span id="total_files" class="attachments_preview_text">Selected attachments </span>
          <!-- attachment upload loader  -->
          <span id="upload_loader" class="loader_upload">
            <img src="./images/infinity_loader.svg" alt="loader" />
          </span>
          <!-- attachment figure container start -->
          <div
            id="attachment_figure_container"
            class="attachment_figure_container"
          >
            <!-- attachments image will show here -->
          </div>
          <!-- attachment figure container end -->
          <span class="attachments_preview_text warn">Maximum 10 files (24MB)</span>
          <span onclick="close_attachments_preview()" class="close_preview_attachment">&#128502;</span>
        </div>
      </form>

    </div>
    <%- include('./partials/add-conversation-modal.ejs'); %>
  </section>
  
  <!-- import socket io client from cdn -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

  <!-- header js -->
  <script src="./js/header.js"></script>
  <!-- toggle selected -->
  <script src="./js/toggleSelected.js"></script>

  <script>

    const form = document.querySelector('#chat-form');
    const messageContainer = document.querySelector('#chat-message-list');
    const chatTitleContainer = document.querySelector('#conversation-partner');
    const chatAvatarContainer = document.querySelector('#conversation-partner-avatar');
    const loggedinUserId = '<%= loggedInUser.userId %>';
    const loggedinUserName = '<%= loggedInUser.username %>';
    let participant = null; // selected conversation participant object
    let current_conversation_id; // selected conversation id
    
    // search conversation
    let startSearchingTimer;
    const endTypingInterval = 500;
    const search_field = document.querySelector("input#search_field");
    let conversations_placeholder = document.querySelector(".search_conversation");

    // attachment Preview Container
    const attachmentPreviewContainer = document.getElementById('attachments_preview_container');
    // attachments preview
    const attachment_field = document.getElementById("attachment");
    // attachment image container
    const attachmentImageContainer = document.getElementById(
      "attachment_figure_container"
    );
    // total file numbers
    const totalSelectFile = document.getElementById("total_files");
    const infinity_loader = document.getElementById("upload_loader");

    // delete success toast
    const successDeleteToast = (topic) => {
      Swal.fire({
        toast: true,
        position: "top-end",
        title: "Deleted !",
        text: `${topic} has been deleted.`,
        icon: "success",
        color: "#12fc12",
        background: 'linear-gradient(315deg, #222222, #292929)',
        showConfirmButton: false,
        timer: 4000,
      });
    }

    // delete cancel toast 
    const cancelDeleteToast = () => {
      Swal.fire({
        toast: true,
        position: "top-end",
        title: "Cancelled !",
        text: "Operation cancelled",
        icon: "info",
        color: "#43dde6",
        background: 'linear-gradient(315deg, #222222, #292929)',
        showConfirmButton: false,
        timer: 4000,
      });
    }

    // delete failed toast
    const failedToast = (text) => {
      Swal.fire({
        toast: true,
        position: "top-end",
        title: "Error !",
        text: text,
        icon: "error",
        color: "#fc5185",
        background: 'linear-gradient(315deg, #222222, #292929)',
        showConfirmButton: false,
        timer: 5000,
      });
    }

    // socket initialization
    const socket = io('<%= process.env.APP_URL %>');

    // handle new/live incoming message from socket
    socket.on("new_message", data => {

      // only respond if current conversation is open in any client
      if(data.message.conversation_id == current_conversation_id) {
        // message class
        const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
        
        // sender avatar
        const senderAvatar = data.message.sender.avatar ? `<img src="${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

        // message attachments
        let attachments = '<div class="attachments">';

        if(data.message.attachment && data.message.attachment.length > 0) {
          data.message.attachment.forEach(attachment => {
            attachments += `<img src=${attachment.attachment_file} /> `;
          });
        }

        attachments += '</div>';

        let messageHTML;

        // do not show avatar for loggedin user
        if(data.message.sender.id == loggedinUserId) {
          messageHTML = 
          `<div class="message-row ${messageClass}">
            <div class="message-content">
              <div class="first_content">
                <div class="message-text">${data.message.message}</div>
              </div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div>
          </div>`;
        } else {
          messageHTML = 
          `<div class="message-row ${messageClass}">
            <div class="message-content">
              <div class="first_content"> 
                ${senderAvatar}
                <div class="message-text">${data.message.message}</div>
              </div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div>
          </div>`;
        }

        // append the incoming message to message area as last item
        document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
      }
    });

    // get messages of a conversation
    async function getMessages(conversation_id, current_conversation_name, current_conversation_avatar){
      let response = await fetch(`/inbox/messages/${conversation_id}`);
      const result= await response.json();

      if(!result.errors && result.data) {
          form.style.visibility = 'visible';
          
          const {data, user, conversation_id} = result;

          participant = data.participant;
          current_conversation_id = conversation_id;

          if(data.messages) {

            let allMessages = '';

            if(data.messages.length > 0) {
              data.messages.forEach((message) => {
                let senderAvatar = message.sender.avatar ? `${message.sender.avatar}` : './images/nophoto.png';
                const messageClass = message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
                const showAvatar = message.sender.id === loggedinUserId ? '' : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;
                const showTrashIcon = message.sender.id === loggedinUserId ? 'message-dlt' : 'message-dlt hide';

                // message attachments
                let attachments = '<div class="attachments">';

                if(message.attachment && message.attachment.length > 0) {
                  message.attachment.forEach(attachment => {
                    attachments += `<img src=${attachment.attachment_file} /> `;
                  });
                }

                attachments += '</div>';

                // final message html
                let messageHTML = 
                `<div id="${message._id}" class="message-row ${messageClass}">
                  <div class="message-content">
                    <div class="first_content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                    </div>
                    ${attachments}
                    <div class="third_content">
                      <div class="message-time">${moment(message.date_time).fromNow()}</div>
                      <div class="${showTrashIcon}">
                        <img onclick="deleteMessage('${message._id}')" src="./images/trash.svg" alt="Delete" />
                      </div>
                    </div>
                  </div>
                </div>`;

                allMessages += messageHTML;
                messageContainer.innerHTML = allMessages;
              });
            } else if(data.messages.length === 0) {
              messageContainer.innerHTML = '<div class="message-row"></div>';
            }
            chatAvatarContainer.style.display = 'block';
            if(current_conversation_avatar && current_conversation_avatar.length > 0){
              chatAvatarContainer.setAttribute('src', `${current_conversation_avatar}`);
            } else {
              chatAvatarContainer.setAttribute('src', `./images/nophoto.png`);
            }
            chatTitleContainer.textContent = current_conversation_name;
            conversations_placeholder.style.display = "none";
          }
      } else {
        failedToast("Error loading messages!");
      }
  }

    // message sending
    form.onsubmit = async function (event) {
      event.preventDefault();
      infinity_loader.style.display = 'block'

      // prepare the form data
      const formData = new FormData(form);
      formData.append('receiverId', participant.id);
      formData.append('receiverName', participant.name);
      formData.append('avatar', participant.avatar || '');
      formData.append('conversationId', current_conversation_id);

      // send the request to server
      let response = await fetch("/inbox/message", {
        method: "POST",
        body: formData,
      });

      // get response
      let result = await response.json();

      if (!result.errors) {
        attachmentPreviewContainer.style.display = "none";
        infinity_loader.style.display = 'none';
        form.reset(); // reset the form
      } else {
        attachmentPreviewContainer.style.display = "none";
        infinity_loader.style.display = 'none'
        failedToast("Error sending messages!");
      }
    }

    function selected_attachments(){
      attachmentPreviewContainer.style.display="flex";
      attachmentImageContainer.innerHTML = "";
        totalSelectFile.textContent = `${attachment_field.files.length} Files Selected`;

        for (const file of attachment_field.files) {
          let reader = new FileReader();
          let figure = document.createElement("figure");
          let figCap = document.createElement("figcaption");
          figCap.innerText = file.name;
          figure.appendChild(figCap);
          reader.onload = () => {
            let image = document.createElement("img");
            image.setAttribute("src", reader.result);
            figure.insertBefore(image, figCap);
          };
          attachmentImageContainer.appendChild(figure);
          reader.readAsDataURL(file);
        }
    }

    function close_attachments_preview(){
      attachmentPreviewContainer.style.display=null;
      attachmentImageContainer.innerHTML=null;
    }

    // on keyup, start the countdown
    search_field.addEventListener("keyup",()=>{
      clearTimeout(startSearchingTimer);
      // reset 
      conversations_placeholder.style.display = "none";

      if(search_field.value){
        startSearchingTimer = setTimeout(searchConversations, endTypingInterval); //user is "finished typing", send search request 
      }
    });

    // on keydown , clear the countdown
    search_field.addEventListener("keydown", ()=>{
      clearTimeout(startSearchingTimer);
    });

    // search conversation
    async function searchConversations(){
      let response = await fetch("/inbox/search/conversation", {
        method: "POST",
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        },
        body: JSON.stringify({
          conversation: search_field.value,
        }),
      });

      // get response 
      let result = await response.json();
      

      // handle error and response
      if (result.errors) {
        const error_placeholder = document.getElementById("conversation_search_error");
        error_placeholder.textContent = result.errors.common.msg;
        error_placeholder.style.display = "block";
      } else {
        if (result.length > 0) {
          let generateHTML = "<ul>";
          result.forEach((conversation)=>{
            const creator = conversation.creator;
            const participant = conversation.participant;
            if(creator.name !== loggedinUserName) {
              const avatar = creator.avatar ? "" + creator.avatar : "./images/nophoto.png";

              generateHTML += 
                `<li onclick="getMessages('${conversation._id}', '${creator.name}')">
                  <div class="user">
                    <div class="avatar">
                      <img src="${avatar}" />
                    </div>
                    <div class="username">${creator.name}</div>
                  </div>
                 </li>`;
            } else {
              const avatar = participant.avatar ? "" + participant.avatar : "./images/nophoto.png";

              generateHTML += 
                `<li onclick="getMessages('${conversation._id}', '${participant.name}')">
                  <div class="user">
                    <div class="avatar">
                      <img src="${avatar}" />
                    </div>
                    <div class="username">${participant.name}</div>
                  </div>
                 </li>`;
            }
          });
          generateHTML += "</ul>";
          conversations_placeholder.innerHTML = generateHTML;
          conversations_placeholder.style.display = "block";
        }
      }
    }

    // message delete
    async function deleteMessage(messageId){

      // trigger confirm popup
      Swal.fire({
        title: 'Delete message?',
        text: "Message will delete permanently!",
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#12fc12',
        cancelButtonColor: '#ff4757',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Keep',
        color: '#fff',
        background: 'linear-gradient(315deg, #222222, #292929)'
      }).then(async (result) => {
        if (result.isConfirmed) {
          let response = await fetch(`/inbox/msg/${messageId}`, {
            method: "DELETE",
          });

          let result = await response.json();

          if(!result.errors){
            successDeleteToast("Message");
            document.getElementById(messageId).remove();
          } else {
            failedToast(`Couldn't delete message !`);
          }
        } else {
          cancelDeleteToast();
        }
      });
    }

    // conversation delete
    async function deleteConversation(conversationId) {
      
      // trigger confirm popup
      Swal.fire({
        title: 'Delete conversation?',
        text: "Conversation will delete permanently!",
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#2ecc71',
        cancelButtonColor: '#ff4757',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Keep',
        color: '#fff',
        background: 'linear-gradient(315deg, #222222, #292929)'
      }).then(async (result) => {
        if (result.isConfirmed) {
          let response = await fetch(`/inbox/conversation/${conversationId}`, {
            method: "DELETE",
          });

          let result = await response.json();

          if(!result.errors){
            successDeleteToast("Conversation");
            // reloading page
            setTimeout(() => {
              location.reload();
            }, 1000);
          } else {
            failedToast("Couldn't delete conversation");
          }
        } else {
          cancelDeleteToast();
        }
      });
    }
    

  </script>
    
  </body>
</html>
